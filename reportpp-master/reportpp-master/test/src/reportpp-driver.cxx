/*
 * This file is part of reportpp.
 * 
 * Original version is not copyrighted and auto-generated by
 * CodeSynthesis XSD, an XML Schema to C++ data binding compiler.
 *
 * reportpp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * reportpp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with reportpp.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * ---
 * Copyright (C) 2014, mickey <mickey.mouse-1985@libero.it>
 */

#include "reportpp-pimpl.hxx"
#include "reportpp/parser/PageBlock.hpp"
#include "reportpp/parser/PageFormat.hpp"
#include "reportpp/parser/Report.hpp"
#include "reportpp/parser/ReportPage.hpp"

#include <iostream>

int
main (int argc, char* argv[]) {
  if (argc != 2) {
    std::cerr << "usage: " << argv[0] << " file.xml" << std::endl;
    return 1;
  }

  try {
    // Instantiate individual parsers.
    //
    ::reportpp::parser::Report report;
    ::reportpp::parser::ReportPage reportPage;
    ::reportpp::parser::PageBlock pageBlock;
    ::reportpp::textElement_pimpl textElement_p;
    ::xml_schema::float_pimpl float_p;
    ::xml_schema::string_pimpl string_p;
    ::xml_schema::integer_pimpl integer_p;
    ::reportpp::shapeElement_pimpl shapeElement_p;
    ::reportpp::shapeType_pimpl shapeType_p;
    ::reportpp::imageElement_pimpl imageElement_p;
    ::reportpp::parser::PageFormat pageFormat;

    // Connect the parsers together.
    //
    report.parsers(reportPage,
                   reportPage,
                   reportPage,
                   reportPage,
                   pageFormat,
                   float_p,
                   float_p,
                   float_p,
                   float_p);

    reportPage.parsers(pageBlock,
                       pageFormat,
                       float_p,
                       float_p,
                       float_p,
                       float_p);

    pageBlock.parsers (textElement_p,
                       textElement_p,
                       shapeElement_p,
                       imageElement_p);

    textElement_p.parsers (float_p,
                           float_p,
                           string_p,
                           integer_p,
                           string_p);

    shapeElement_p.parsers (shapeType_p,
                            float_p,
                            float_p,
                            float_p,
                            float_p);

    imageElement_p.parsers (string_p,
                            float_p,
                            float_p,
                            float_p,
                            float_p);

    // Parse the XML document.
    //
    ::xml_schema::document doc_p(report, "https://github.com/mmickey/reportpp", "report");

    report.pre();
    doc_p.parse(argv[1]);
    reportpp::ReportGen reportGen = report.post_ReportType();

    reportGen.finalizeDocument();
    reportGen.saveToFile("test.pdf");
  } catch (const ::xml_schema::exception& e) {
    std::cerr << e << std::endl;
    return 1;
  } catch (const std::ios_base::failure&) {
    std::cerr << argv[1] << ": error: io failure" << std::endl;
    return 1;
  }
}
